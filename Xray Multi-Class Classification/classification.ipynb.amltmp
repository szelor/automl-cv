{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import azureml.core\r\n",
        "\r\n",
        "print(\"You are currently using version\", azureml.core.VERSION, \"of the Azure ML SDK.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "You are currently using version 1.38.0 of the Azure ML SDK.\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1650203815432
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.workspace import Workspace\r\n",
        "\r\n",
        "ws = Workspace.from_config()"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203816873
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute, ComputeTarget\r\n",
        "\r\n",
        "cluster_name = \"NC6Cluster\"\r\n",
        "\r\n",
        "try:\r\n",
        "    compute_target = ws.compute_targets[cluster_name]\r\n",
        "    print(\"Found existing compute target.\")\r\n",
        "except KeyError:\r\n",
        "    print(\"Creating a new compute target...\")\r\n",
        "    compute_config = AmlCompute.provisioning_configuration(\r\n",
        "        vm_size=\"Standard_NC6\",\r\n",
        "        idle_seconds_before_scaledown=600,\r\n",
        "        min_nodes=0,\r\n",
        "        max_nodes=4,\r\n",
        "    )\r\n",
        "    compute_target = ComputeTarget.create(ws, cluster_name, compute_config)\r\n",
        "# Can poll for a minimum number of nodes and for a specific timeout.\r\n",
        "# If no min_node_count is provided, it will use the scale settings for the cluster.\r\n",
        "compute_target.wait_for_completion(\r\n",
        "    show_output=True, min_node_count=None, timeout_in_minutes=20\r\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found existing compute target.\nSucceeded\nAmlCompute wait for completion finished\n\nMinimum number of nodes requested have been provisioned\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203817791
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Experiment\r\n",
        "\r\n",
        "experiment_name = \"automl-image-multiclass-xray\"\r\n",
        "experiment = Experiment(ws, name=experiment_name)"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203817941
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Dataset\r\n",
        "from azureml.data import DataType\r\n",
        "\r\n",
        "# get existing training dataset\r\n",
        "training_dataset_name = \"XrayTrainingDataset\"\r\n",
        "if training_dataset_name in ws.datasets:\r\n",
        "    training_dataset = ws.datasets.get(training_dataset_name)\r\n",
        "    print(\"Found the training dataset\", training_dataset_name)\r\n",
        "\r\n",
        "# get existing validation dataset\r\n",
        "validation_dataset_name = \"XrayValidationDataset\"\r\n",
        "if validation_dataset_name in ws.datasets:\r\n",
        "    validation_dataset = ws.datasets.get(validation_dataset_name)\r\n",
        "    print(\"Found the validation dataset\", validation_dataset_name)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Found the training dataset XrayTrainingDataset\nFound the validation dataset XrayValidationDataset\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203818115
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "training_dataset.to_pandas_dataframe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "                                             image_url      label\n0        workspaceblobstore/Xray/Covid/COVID19(59).jpg      Covid\n1         workspaceblobstore/Xray/Covid/COVID19(6).jpg      Covid\n2        workspaceblobstore/Xray/Covid/COVID19(60).jpg      Covid\n3        workspaceblobstore/Xray/Covid/COVID19(61).jpg      Covid\n4        workspaceblobstore/Xray/Covid/COVID19(62).jpg      Covid\n..                                                 ...        ...\n130  workspaceblobstore/Xray/Pneumonia/person994_vi...  Pneumonia\n131  workspaceblobstore/Xray/Pneumonia/person995_ba...  Pneumonia\n132  workspaceblobstore/Xray/Pneumonia/person995_vi...  Pneumonia\n133  workspaceblobstore/Xray/Pneumonia/person996_vi...  Pneumonia\n134  workspaceblobstore/Xray/Pneumonia/person9_bact...  Pneumonia\n\n[135 rows x 2 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image_url</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>workspaceblobstore/Xray/Covid/COVID19(59).jpg</td>\n      <td>Covid</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>workspaceblobstore/Xray/Covid/COVID19(6).jpg</td>\n      <td>Covid</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>workspaceblobstore/Xray/Covid/COVID19(60).jpg</td>\n      <td>Covid</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>workspaceblobstore/Xray/Covid/COVID19(61).jpg</td>\n      <td>Covid</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>workspaceblobstore/Xray/Covid/COVID19(62).jpg</td>\n      <td>Covid</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>workspaceblobstore/Xray/Pneumonia/person994_vi...</td>\n      <td>Pneumonia</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>workspaceblobstore/Xray/Pneumonia/person995_ba...</td>\n      <td>Pneumonia</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>workspaceblobstore/Xray/Pneumonia/person995_vi...</td>\n      <td>Pneumonia</td>\n    </tr>\n    <tr>\n      <th>133</th>\n      <td>workspaceblobstore/Xray/Pneumonia/person996_vi...</td>\n      <td>Pneumonia</td>\n    </tr>\n    <tr>\n      <th>134</th>\n      <td>workspaceblobstore/Xray/Pneumonia/person9_bact...</td>\n      <td>Pneumonia</td>\n    </tr>\n  </tbody>\n</table>\n<p>135 rows Ã— 2 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203821879
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.automl.core.shared.constants import ImageTask\r\n",
        "from azureml.train.automl import AutoMLImageConfig\r\n",
        "from azureml.train.hyperdrive import GridParameterSampling, choice\r\n",
        "\r\n",
        "image_config_resnet = AutoMLImageConfig(\r\n",
        "    task=ImageTask.IMAGE_CLASSIFICATION,\r\n",
        "    compute_target=compute_target,\r\n",
        "    training_data=training_dataset,\r\n",
        "    validation_data=validation_dataset,\r\n",
        "    hyperparameter_sampling=GridParameterSampling({\"model_name\": choice(\"resnet34\")}),\r\n",
        "    iterations=1,\r\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203822031
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_image_run = experiment.submit(image_config_resnet)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitting remote run.\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>automl-image-multiclass-xray</td><td>AutoML_fb339086-4083-421d-a45a-83dc58041c40</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_fb339086-4083-421d-a45a-83dc58041c40?wsid=/subscriptions/da21a094-26a3-472f-991b-e2b11979af40/resourcegroups/wit/workspaces/wit&amp;tid=df754217-29e5-4804-8f67-a71311a3cd0f\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203824813
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_image_run.wait_for_completion(wait_post_processing=True)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "{'runId': 'AutoML_fb339086-4083-421d-a45a-83dc58041c40',\n 'target': 'NC6Cluster',\n 'status': 'Completed',\n 'startTimeUtc': '2022-04-17T13:57:14.586569Z',\n 'endTimeUtc': '2022-04-17T14:07:23.41018Z',\n 'services': {},\n 'properties': {'num_iterations': '1',\n  'training_type': 'TrainFull',\n  'acquisition_function': 'EI',\n  'primary_metric': 'accuracy',\n  'train_split': '0',\n  'acquisition_parameter': '0',\n  'num_cross_validation': None,\n  'target': 'NC6Cluster',\n  'AMLSettingsJsonString': '{\"path\":null,\"name\":\"automl-image-multiclass-xray\",\"subscription_id\":\"da21a094-26a3-472f-991b-e2b11979af40\",\"resource_group\":\"wit\",\"workspace_name\":\"wit\",\"region\":\"westeurope\",\"compute_target\":\"NC6Cluster\",\"spark_service\":null,\"azure_service\":\"remote\",\"many_models\":false,\"pipeline_fetch_max_batch_size\":1,\"enable_batch_run\":true,\"enable_run_restructure\":false,\"start_auxiliary_runs_before_parent_complete\":false,\"enable_code_generation\":false,\"iterations\":1,\"primary_metric\":\"accuracy\",\"task_type\":\"image-classification\",\"positive_label\":null,\"data_script\":null,\"test_size\":0.0,\"test_include_predictions_only\":false,\"validation_size\":0.0,\"n_cross_validations\":null,\"y_min\":null,\"y_max\":null,\"num_classes\":null,\"featurization\":\"off\",\"_ignore_package_version_incompatibilities\":false,\"is_timeseries\":false,\"max_cores_per_iteration\":1,\"max_concurrent_iterations\":1,\"iteration_timeout_minutes\":null,\"mem_in_mb\":null,\"enforce_time_on_windows\":false,\"experiment_timeout_minutes\":8640,\"experiment_exit_score\":null,\"whitelist_models\":null,\"blacklist_algos\":[\"TensorFlowDNN\",\"TensorFlowLinearRegressor\"],\"supported_models\":[],\"private_models\":[],\"auto_blacklist\":true,\"blacklist_samples_reached\":false,\"exclude_nan_labels\":true,\"verbosity\":20,\"_debug_log\":\"azureml_automl.log\",\"show_warnings\":false,\"model_explainability\":true,\"service_url\":null,\"sdk_url\":null,\"sdk_packages\":null,\"enable_onnx_compatible_models\":false,\"enable_split_onnx_featurizer_estimator_models\":false,\"vm_type\":\"STANDARD_NC6\",\"telemetry_verbosity\":20,\"send_telemetry\":true,\"enable_dnn\":true,\"scenario\":\"Vision\",\"environment_label\":null,\"save_mlflow\":false,\"enable_categorical_indicators\":false,\"force_text_dnn\":false,\"enable_feature_sweeping\":true,\"enable_early_stopping\":true,\"early_stopping_n_iters\":10,\"arguments\":null,\"dataset_id\":\"e48d9735-d4c0-48f0-a5e6-b6b62eb06a10\",\"hyperdrive_config\":{\"max_total_jobs\":1,\"max_concurrent_jobs\":1,\"generator_config\":{\"name\":\"GRID\",\"parameter_space\":\"{\\\\\"model_name\\\\\": [\\\\\"choice\\\\\", [[\\\\\"resnet34\\\\\"]]]}\",\"properties\":null},\"policy_config\":null},\"validation_dataset_id\":\"dceb3e3d-a0aa-4b1f-bae7-61b8a01be49a\",\"run_source\":\"AutoMLImageSDK\",\"metrics\":null,\"enable_metric_confidence\":false,\"enable_ensembling\":false,\"enable_stack_ensembling\":false,\"ensemble_iterations\":null,\"enable_tf\":false,\"enable_subsampling\":false,\"subsample_seed\":null,\"enable_nimbusml\":false,\"enable_streaming\":false,\"force_streaming\":false,\"track_child_runs\":true,\"allowed_private_models\":[],\"label_column_name\":\"label\",\"weight_column_name\":null,\"cv_split_column_names\":null,\"enable_local_managed\":false,\"_local_managed_run_id\":null,\"cost_mode\":1,\"lag_length\":0,\"metric_operation\":\"maximize\",\"preprocess\":false}',\n  'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"e48d9735-d4c0-48f0-a5e6-b6b62eb06a10\\\\\"}, \\\\\"validation_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"dceb3e3d-a0aa-4b1f-bae7-61b8a01be49a\\\\\"}, \\\\\"datasets\\\\\": 0}',\n  'EnableSubsampling': 'False',\n  'runTemplate': 'AutoML',\n  'azureml.runsource': 'AutoMLImageSDK',\n  'display_task_type': 'image-classification',\n  'dependencies_versions': '{\"azureml-widgets\": \"1.38.0\", \"azureml-train\": \"1.38.0\", \"azureml-train-restclients-hyperdrive\": \"1.38.0\", \"azureml-train-core\": \"1.38.0\", \"azureml-train-automl-client\": \"1.38.0\", \"azureml-tensorboard\": \"1.38.0\", \"azureml-telemetry\": \"1.38.0\", \"azureml-sdk\": \"1.38.0\", \"azureml-samples\": \"0+unknown\", \"azureml-responsibleai\": \"1.38.0\", \"azureml-pipeline\": \"1.38.0\", \"azureml-pipeline-steps\": \"1.38.0\", \"azureml-pipeline-core\": \"1.38.0\", \"azureml-opendatasets\": \"1.38.0\", \"azureml-mlflow\": \"1.38.0\", \"azureml-interpret\": \"1.38.0\", \"azureml-inference-server-http\": \"0.4.2\", \"azureml-explain-model\": \"1.38.0\", \"azureml-defaults\": \"1.38.0\", \"azureml-dataset-runtime\": \"1.38.0\", \"azureml-dataprep\": \"2.26.0\", \"azureml-dataprep-rslex\": \"2.2.0\", \"azureml-dataprep-native\": \"38.0.0\", \"azureml-datadrift\": \"1.38.0\", \"azureml-core\": \"1.38.0\", \"azureml-contrib-services\": \"1.38.0\", \"azureml-contrib-server\": \"1.38.0\", \"azureml-contrib-reinforcementlearning\": \"1.38.0\", \"azureml-contrib-pipeline-steps\": \"1.38.0\", \"azureml-contrib-notebook\": \"1.38.0\", \"azureml-contrib-fairness\": \"1.38.0\", \"azureml-contrib-dataset\": \"1.38.0\", \"azureml-cli-common\": \"1.38.0\", \"azureml-automl-core\": \"1.38.0\", \"azureml-accel-models\": \"1.38.0\"}',\n  '_aml_system_scenario_identification': 'Remote.Parent',\n  'ClientType': 'SDK',\n  'environment_cpu_name': 'AzureML-AutoML-DNN-Vision-GPU',\n  'environment_cpu_label': 'Latest',\n  'environment_gpu_name': 'AzureML-AutoML-DNN-Vision-GPU',\n  'environment_gpu_label': 'Latest',\n  'root_attribution': 'AutoMLImageSDK',\n  'attribution': 'AutoML',\n  'Orchestrator': 'AutoML',\n  'CancelUri': 'https://westeurope.api.azureml.ms/jasmine/v1.0/subscriptions/da21a094-26a3-472f-991b-e2b11979af40/resourceGroups/wit/providers/Microsoft.MachineLearningServices/workspaces/wit/experimentids/4551da62-1d4f-4656-b825-67547484154f/cancel/AutoML_fb339086-4083-421d-a45a-83dc58041c40',\n  'ClientSdkVersion': '1.40.0.post1',\n  'snapshotId': '00000000-0000-0000-0000-000000000000'},\n 'inputDatasets': [{'dataset': {'id': 'e48d9735-d4c0-48f0-a5e6-b6b62eb06a10'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'training_data', 'mechanism': 'Direct'}}, {'dataset': {'id': 'dceb3e3d-a0aa-4b1f-bae7-61b8a01be49a'}, 'consumptionDetails': {'type': 'RunInput', 'inputName': 'validation_data', 'mechanism': 'Direct'}}],\n 'outputDatasets': [],\n 'logFiles': {},\n 'submittedBy': 'Marcin Szeliga'}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650204449878
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.automl.core.shared.constants import ImageTask\r\n",
        "from azureml.train.automl import AutoMLImageConfig\r\n",
        "from azureml.train.hyperdrive import BanditPolicy, RandomParameterSampling\r\n",
        "from azureml.train.hyperdrive import choice, uniform\r\n",
        "\r\n",
        "parameter_space = {\r\n",
        "    \"learning_rate\": uniform(0.001, 0.01),\r\n",
        "    \"optimizer\": choice(\"sgd\", \"adam\"),\r\n",
        "    \"training_batch_size\": choice(16),\r\n",
        "    \"model\": choice(\r\n",
        "        {\r\n",
        "            \"model_name\": choice(\"vitb16r224\", \"vits16r224\"),\r\n",
        "            \"number_of_epochs\": choice(15, 30),\r\n",
        "        },\r\n",
        "        {\r\n",
        "            \"model_name\": choice(\"seresnext\", \"resnet18\", \"resnest50\", \"resnest101\"),\r\n",
        "            \"layers_to_freeze\": choice(0, 2),\r\n",
        "        },\r\n",
        "    ),\r\n",
        "}\r\n",
        "\r\n",
        "tuning_settings = {\r\n",
        "    \"iterations\": 10,\r\n",
        "    \"max_concurrent_iterations\": 2,\r\n",
        "    \"hyperparameter_sampling\": RandomParameterSampling(parameter_space),\r\n",
        "    \"early_termination_policy\": BanditPolicy(\r\n",
        "        evaluation_interval=2, slack_factor=0.2, delay_evaluation=6\r\n",
        "    ),\r\n",
        "}\r\n",
        "\r\n",
        "automl_image_config = AutoMLImageConfig(\r\n",
        "    task=ImageTask.IMAGE_CLASSIFICATION,\r\n",
        "    compute_target=compute_target,\r\n",
        "    training_data=training_dataset,\r\n",
        "    validation_data=validation_dataset,\r\n",
        "    experiment_timeout_hours=6,\r\n",
        "    **tuning_settings,\r\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650204450037
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_image_run = experiment.submit(automl_image_config)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Submitting remote run.\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>automl-image-multiclass-xray</td><td>AutoML_398dd406-947e-423a-8958-6841ab4956bb</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_398dd406-947e-423a-8958-6841ab4956bb?wsid=/subscriptions/da21a094-26a3-472f-991b-e2b11979af40/resourcegroups/wit/workspaces/wit&amp;tid=df754217-29e5-4804-8f67-a71311a3cd0f\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203718848
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "automl_image_run.wait_for_completion(wait_post_processing=True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203719107
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Register the model from the best run\r\n",
        "\r\n",
        "best_child_run = automl_image_run.get_best_child()\r\n",
        "model_name = best_child_run.properties[\"model_name\"]\r\n",
        "model = best_child_run.register_model(\r\n",
        "    model_name=model_name, model_path=\"outputs/model.pt\"\r\n",
        ")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1650203719127
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.1",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}